plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.23.3'
}

group = 'samryong'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation 'org.springframework.boot:spring-boot-starter-validation'\

	// DB 관련
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation ('org.springframework.boot:spring-boot-starter-data-mongodb')

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// spring security
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-messaging'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
  
	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// stomp
	implementation 'org.webjars:stomp-websocket:2.3.4'

}

tasks.named('test') {
	useJUnitPlatform()
}

// querydsl build 설정
def generated = 'src/main/generated'
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}
clean {
	delete file(generated)
}

spotless {
    java {
        // import 순서 정의
        importOrder(
                "java",
                "javax",
                "lombok",
                "org.springframework",
                "",
                "\\#",
                "org.junit",
                "\\#org.junit",
                "com.guide",
                "\\#com.guide"
        )
        removeUnusedImports() // 사용하지 않는 import 제거
        googleJavaFormat()         // 구글 자바 포맷 적용
        indentWithTabs(2)
        indentWithSpaces(4)
        trimTrailingWhitespace() // 공백 제거
        endWithNewline()         // 끝부분 New Line 처리
    }
}

tasks.register('updateGitHooks', Copy) {
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	if (System.getProperty('os.name').toLowerCase().contains('windows')) {
		Runtime.getRuntime().exec("cmd /c chmod -R +x .git/hooks/")
	} else {
		Runtime.getRuntime().exec("chmod -R +x .git/hooks/")
	}
}

tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'updateGitHooks'
}


